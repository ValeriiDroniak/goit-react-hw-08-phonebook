{"version":3,"file":"static/js/236.968ed69e.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/RegisterForm/RegisterForm.jsx","pages/Register.jsx","redux/contacts/selectors.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Field, Form } from 'formik';\n\nexport const Error = styled.p`\n  margin: 0 0 8px 0;\n  color: red;\n`;\n\nexport const MyForm = styled(Form)`\n  width: 400px;\n  margin: 0 auto;\n`;\n\nexport const Label = styled.label`\n  font-weight: 700;\n  text-transform: uppercase;\n  font-size: 16px;\n  padding-bottom: 10px;\n  color: rgba(255, 255, 255, 0.7);\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Input = styled.input`\n  max-width: 100%;\n  height: 35px;\n  border: none;\n  border-radius: 20px;\n  margin-bottom: 20px;\n  padding-left: 12px;\n  background: rgba(255, 255, 255, 0.2);\n  color: rgba(255, 255, 255, 1);\n  font-size: 16px;\n`;\n\nexport const FieldInput = styled(Field)`\n  max-width: 100%;\n  height: 35px;\n  border: none;\n  border-radius: 20px;\n  margin-bottom: 20px;\n  padding-left: 12px;\n  background: rgba(255, 255, 255, 0.2);\n  color: rgba(255, 255, 255, 1);\n  font-size: 16px;\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { Error, FieldInput, MyForm, Label } from './ContactForm.styled';\nimport { Button, Typography } from '@mui/material';\nimport { setToast } from 'redux/toast/slice';\n\nconst nameRedex = /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\nconst numberRedex =\n  /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/;\n\nconst schema = yup.object().shape({\n  name: yup.string().matches(nameRedex).required('Contact name is required'),\n  number: yup\n    .string()\n    .matches(numberRedex, 'Invalid phone.')\n    .min(9, 'At least 9 digits is required')\n    .max(11, 'At most 11 digits is required')\n    .required('Phone number is required'),\n});\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const findContactByName = name =>\n    contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase().trim()\n    );\n\n  const createContact = ({ name, number }) => ({\n    name: name.trim(),\n    number: number.trim(),\n  });\n\n  const handleSubmit = (values, { resetForm }) => {\n    if (findContactByName(values.name)) {\n      dispatch(\n        setToast({\n          open: true,\n          message: `${values.name} is already in contacts`,\n          condition: 'info',\n        })\n      );\n\n      return;\n    }\n\n    dispatch(addContact(createContact(values)));\n    dispatch(\n      setToast({\n        open: true,\n        message: 'The Contact is added',\n        condition: 'success',\n      })\n    );\n\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      onSubmit={handleSubmit}\n      validationSchema={schema}\n    >\n      <MyForm>\n        <Label htmlFor=\"name\">\n          <Typography component=\"span\" ml=\"12px\" mb=\"8px\">\n            Name\n          </Typography>\n          <FieldInput type=\"text\" name=\"name\" />\n          <ErrorMessage\n            name=\"name\"\n            component=\"div\"\n            render={message => <Error>{message}</Error>}\n          />\n        </Label>\n        <Label htmlFor=\"number\">\n          <Typography component=\"span\" ml=\"12px\" mb=\"8px\">\n            Number\n          </Typography>\n          <FieldInput type=\"tel\" name=\"number\" />\n          <ErrorMessage\n            name=\"number\"\n            component=\"div\"\n            render={message => <Error>{message}</Error>}\n          />\n        </Label>\n\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          sx={{\n            width: '100%',\n            borderRadius: '20px',\n            mt: '12px',\n            fontWeight: 700,\n            fontSize: '18px',\n          }}\n        >\n          Add contact\n        </Button>\n      </MyForm>\n    </Formik>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { Formik } from 'formik';\nimport { Button, Typography } from '@mui/material';\nimport { register } from 'redux/auth/operations';\nimport { FieldInput, Label, MyForm } from 'components/ContactForm';\nimport { setToast } from 'redux/toast/slice';\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(register(values));\n    dispatch(\n      setToast({\n        open: true,\n        message: 'Congratulations, now you can use our app',\n        condition: 'success',\n      })\n    );\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', email: '', password: '' }}\n      onSubmit={handleSubmit}\n    >\n      <MyForm>\n        <Label>\n          <Typography component=\"span\" ml=\"12px\" mb=\"8px\">\n            Username\n          </Typography>\n          <FieldInput type=\"text\" name=\"name\" />\n        </Label>\n        <Label>\n          <Typography component=\"span\" ml=\"12px\" mb=\"8px\">\n            Email\n          </Typography>\n          <FieldInput type=\"email\" name=\"email\" />\n        </Label>\n        <Label>\n          <Typography component=\"span\" ml=\"12px\" mb=\"8px\">\n            Password\n          </Typography>\n          <FieldInput type=\"password\" name=\"password\" />\n        </Label>\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          sx={{\n            width: '100%',\n            borderRadius: '20px',\n            mt: '12px',\n            fontWeight: 700,\n            fontSize: '18px',\n          }}\n        >\n          Register\n        </Button>\n      </MyForm>\n    </Formik>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport { Container } from '@mui/material';\n\nexport default function Register() {\n  return (\n    <Container\n      maxWidth=\"lg\"\n      fixed\n      sx={{\n        display: 'flex',\n        justifyContent: 'center',\n      }}\n    >\n      <RegisterForm />\n    </Container>\n  );\n}\n","export const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n"],"names":["Error","styled","MyForm","Form","Label","Input","FieldInput","Field","schema","yup","shape","name","matches","required","number","min","max","ContactForm","contacts","useSelector","selectContacts","dispatch","useDispatch","initialValues","onSubmit","values","resetForm","find","contact","toLowerCase","trim","setToast","open","message","condition","addContact","createContact","validationSchema","htmlFor","Typography","component","ml","mb","type","render","Button","variant","sx","width","borderRadius","mt","fontWeight","fontSize","RegisterForm","email","password","register","Register","Container","maxWidth","fixed","display","justifyContent","state","items","selectFilter","filter"],"sourceRoot":""}